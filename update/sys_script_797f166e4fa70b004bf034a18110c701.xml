<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_162627_absence_a_absence</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>BaseValidation</name>
        <order>150</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	//Validate the dates
	if(validateDates(current.start_date, current.end_date)){
		current.setAbortAction(true);
		gs.addErrorMessage('End date cannot be before Start date!');
		return;
	}
	
	//Check if there are conflict leaves
	var conflictMessage = checkForConflictLeaves(current.start_date, current.end_date, current.sys_id, current.requester);
	if(conflictMessage != ''){
		current.setAbortAction(true);
		gs.addErrorMessage(conflictMessage);
		return;
	}
	
	//Validate the duration
	var duration = calculateDuration(current.start_date, current.end_date);
	if((current.number_of_days != duration)){
		current.number_of_days = duration;
	}
	
	if(current.isNewRecord()){
		var ugr = new GlideRecord('sys_user');
		if(ugr.get(current.requester)){
			var manager = ugr.getValue('manager');
			
			if(!manager){
				current.status = 'approved';
				leavesCalculation(ugr, current);
			} else {
				if(current.type == 'medical_leave'){
					current.status = 'approved';
					current.assignment_group = getGroup('Accountant');
					leavesCalculation(ugr,current);
					gs.eventQueue('x_162627_absence_a.medical_leave.info', current, current.requester.email, current.approver.email);
				} else {
					current.assigned_to = manager;
					current.status = 'wait_approval';
				}
			}
		}
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-12 08:11:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>797f166e4fa70b004bf034a18110c701</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>BaseValidation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Absence application" source="x_162627_absence_a">ffffd5884f63c3004bf034a18110c72c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Absence application">ffffd5884f63c3004bf034a18110c72c</sys_scope>
        <sys_update_name>sys_script_797f166e4fa70b004bf034a18110c701</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-12 17:19:25</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=797f166e4fa70b004bf034a18110c701"/>
</record_update>
